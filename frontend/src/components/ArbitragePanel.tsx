import { useMemo } from 'react'
import { TokenItem } from '../lib/api'

interface ArbitragePanelProps {
  tokens: TokenItem[]
  notarbMinScore?: number
}

function getTokenAge(createdAt?: string): number {
  if (!createdAt) return 999
  const now = new Date()
  const created = new Date(createdAt)
  return Math.round((now.getTime() - created.getTime()) / (1000 * 60 * 60))
}

function formatTime(timestamp: number): string {
  return new Date(timestamp).toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit'
  })
}

export default function ArbitragePanel({ tokens, notarbMinScore = 0.5 }: ArbitragePanelProps) {
  // –ú–µ–º–æ–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const stats = useMemo(() => {
    const watchThreshold = Math.max(0.4, notarbMinScore - 0.1) // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –Ω–∞ 0.1 –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ –±–æ—Ç–∞
    
    return {
      botReady: tokens.filter(t => (t.score || 0) >= notarbMinScore).length,
      watchList: tokens.filter(t => {
        const score = t.score || 0
        return score >= watchThreshold && score < notarbMinScore
      }).length,
      highActivity: tokens.filter(t => (t.n_5m || 0) >= 150).length,
      freshTokens: tokens.filter(t => getTokenAge(t.created_at) <= 6).length,
      totalActive: tokens.length,
      // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤
      botThreshold: notarbMinScore,
      watchThreshold: watchThreshold
    }
  }, [tokens, notarbMinScore])
  
  return (
    <div className="arbitrage-panel">
      {/* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="panel-header">
        <h3>ü§ñ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å</h3>
        <div className="update-time">
          {formatTime(Date.now())}
        </div>
      </div>

      {/* –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–µ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
      <div className="stats-grid">
        <div className="stat-card bot-ready">
          <div className="stat-icon">üî•</div>
          <div className="stat-content">
            <div className="stat-number">{stats.botReady}</div>
            <div className="stat-label">–ì–æ—Ç–æ–≤—ã –¥–ª—è –±–æ—Ç–∞</div>
            <div className="stat-detail">‚â• {stats.botThreshold}</div>
          </div>
        </div>
        
        <div className="stat-card watch-list">
          <div className="stat-icon">üëÅÔ∏è</div>
          <div className="stat-content">
            <div className="stat-number">{stats.watchList}</div>
            <div className="stat-label">–ù–∞–±–ª—é–¥–µ–Ω–∏–µ</div>
            <div className="stat-detail">{stats.watchThreshold} - {stats.botThreshold}</div>
          </div>
        </div>
        
        <div className="stat-card high-activity">
          <div className="stat-icon">‚ö°</div>
          <div className="stat-content">
            <div className="stat-number">{stats.highActivity}</div>
            <div className="stat-label">–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</div>
            <div className="stat-detail">150+ TX/5–º</div>
          </div>
        </div>
        
        <div className="stat-card fresh-tokens">
          <div className="stat-icon">üÜï</div>
          <div className="stat-content">
            <div className="stat-number">{stats.freshTokens}</div>
            <div className="stat-label">–°–≤–µ–∂–∏–µ</div>
            <div className="stat-detail">&lt; 6 —á–∞—Å–æ–≤</div>
          </div>
        </div>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—â–µ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
      <div className="readiness-indicator">
        <div className="readiness-bar">
          <div 
            className="readiness-fill"
            style={{ 
              width: `${(stats.botReady / Math.max(stats.totalActive, 1)) * 100}%` 
            }}
          />
        </div>
        <div className="readiness-text">
          {((stats.botReady / Math.max(stats.totalActive, 1)) * 100).toFixed(1)}% –≥–æ—Ç–æ–≤—ã –∫ –∞—Ä–±–∏—Ç—Ä–∞–∂—É
        </div>
      </div>
    </div>
  )
}