import { useEffect, useState } from 'react'
import { getSettingsIndividually, putSetting, recalc, SettingsMap, getActiveModel } from '../lib/api'

const arbitrageKeys = [
  'w_tx', 'w_fresh', 'ewma_alpha', 'freshness_threshold_hours',
  'arbitrage_min_tx_5m', 'arbitrage_optimal_tx_5m', 'arbitrage_acceleration_weight',
  'min_score', 'activation_min_liquidity_usd', 'min_pool_liquidity_usd', 
  'hot_interval_sec', 'cold_interval_sec', 'archive_below_hours', 'monitoring_timeout_hours',
  'notarb_min_score', 'notarb_max_spam_percentage',
  'backlog_warning_threshold', 'backlog_error_threshold', 'backlog_critical_threshold',
  'spam_whitelist_wallets'
]

export default function Settings() {
  const [vals, setVals] = useState<SettingsMap>({})
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [message, setMessage] = useState<string>('')

  useEffect(() => {
    (async () => {
      setLoading(true)
      try {
        const settings = await getSettingsIndividually(arbitrageKeys)
        setVals(settings)
      } finally {
        setLoading(false)
      }
    })()
  }, [])

  const update = (k: string, v: string) => setVals(prev => ({ ...prev, [k]: v }))

  async function save(recalculate: boolean) {
    setSaving(true)
    setMessage('')
    try {
      const settingsToUpdate = arbitrageKeys.filter(k => vals[k] != null)
      await Promise.all(settingsToUpdate.map(k => putSetting(k, String(vals[k]))))
      if (recalculate) {
        await recalc()
      }
      setMessage(recalculate ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ü–µ—Ä–µ—Å—á—ë—Ç –∑–∞–ø—É—â–µ–Ω.' : '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')
    } finally {
      setSaving(false)
    }
  }

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>

  const wTx = parseFloat(vals['w_tx'] || '0.6')
  const wFresh = parseFloat(vals['w_fresh'] || '0.4')

  return (
    <div>
      <h2>üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã</h2>
      
      {message && (
        <div style={{ 
          background: '#d4edda', 
          padding: 12, 
          borderRadius: 4, 
          marginBottom: 16,
          border: '1px solid #c3e6cb'
        }}>
          {message}
        </div>
      )}

      <section style={{ marginBottom: 24 }}>
        <h3>‚öñÔ∏è –í–µ—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</h3>
        <div style={{ background: 'white', padding: 16, borderRadius: 8, border: '1px solid #dee2e6' }}>
          
          <div style={{ marginBottom: 16 }}>
            <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
              üî• TX Acceleration ({(wTx * 100).toFixed(0)}%)
            </label>
            <input
              type="number"
              step="0.1"
              min="0"
              max="1"
              value={vals['w_tx'] || '0.6'}
              onChange={(e) => update('w_tx', e.target.value)}
              style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
            />
          </div>

          <div style={{ marginBottom: 16 }}>
            <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
              üÜï Token Freshness ({(wFresh * 100).toFixed(0)}%)
            </label>
            <input
              type="number"
              step="0.1"
              min="0"
              max="1"
              value={vals['w_fresh'] || '0.4'}
              onChange={(e) => update('w_fresh', e.target.value)}
              style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
            />
          </div>

          <div style={{ fontFamily: 'monospace', background: '#f8f9fa', padding: 8, borderRadius: 4 }}>
            <strong>–§–æ—Ä–º—É–ª–∞:</strong> Score = {wTx.toFixed(1)}√óTX + {wFresh.toFixed(1)}√óFresh
          </div>
        </div>
      </section>

      <section style={{ marginBottom: 24 }}>
        <h3>üî• –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ TX</h3>
        <div style={{ background: 'white', padding: 16, borderRadius: 8, border: '1px solid #dee2e6' }}>
          
          <div style={{ marginBottom: 16 }}>
            <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
              –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ (TX/5–º–∏–Ω)
            </label>
            <input
              type="number"
              step="10"
              min="1"
              max="200"
              value={vals['arbitrage_min_tx_5m'] || '50'}
              onChange={(e) => update('arbitrage_min_tx_5m', e.target.value)}
              style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
            />
            <small style={{ color: '#666' }}>
              –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ TX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
            </small>
          </div>

          <div style={{ marginBottom: 16 }}>
            <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
              –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ (TX/5–º–∏–Ω)
            </label>
            <input
              type="number"
              step="10"
              min="50"
              max="500"
              value={vals['arbitrage_optimal_tx_5m'] || '200'}
              onChange={(e) => update('arbitrage_optimal_tx_5m', e.target.value)}
              style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
            />
            <small style={{ color: '#666' }}>
              –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ TX —Å–∫–æ—Ä–∞. –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –±–æ—Ç–æ–≤.
            </small>
          </div>

          <div style={{ marginBottom: 16 }}>
            <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
              –í–µ—Å —É—Å–∫–æ—Ä–µ–Ω–∏—è
            </label>
            <input
              type="number"
              step="0.1"
              min="0.1"
              max="0.9"
              value={vals['arbitrage_acceleration_weight'] || '0.3'}
              onChange={(e) => update('arbitrage_acceleration_weight', e.target.value)}
              style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
            />
            <small style={{ color: '#666' }}>
              –î–æ–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤ TX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ. –û—Å—Ç–∞–ª—å–Ω–æ–µ - –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
            </small>
          </div>
        </div>
      </section>

      <section style={{ marginBottom: 24 }}>
        <h3>üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è</h3>
        <div style={{ background: 'white', padding: 16, borderRadius: 8, border: '1px solid #dee2e6' }}>
          
          <div style={{ marginBottom: 16 }}>
            <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
              EWMA Alpha
            </label>
            <input
              type="number"
              step="0.1"
              min="0.1"
              max="1.0"
              value={vals['ewma_alpha'] || '0.8'}
              onChange={(e) => update('ewma_alpha', e.target.value)}
              style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
            />
            <small style={{ color: '#666' }}>
              –°–∫–æ—Ä–æ—Å—Ç—å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º. 0.1 = —Å—Ç–∞–±–∏–ª—å–Ω–æ, 1.0 = –±—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç.
            </small>
          </div>

          <div style={{ marginBottom: 16 }}>
            <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
              –ü–æ—Ä–æ–≥ —Å–≤–µ–∂–µ—Å—Ç–∏ (—á–∞—Å—ã)
            </label>
            <input
              type="number"
              step="1"
              min="1"
              max="24"
              value={vals['freshness_threshold_hours'] || '6'}
              onChange={(e) => update('freshness_threshold_hours', e.target.value)}
              style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
            />
            <small style={{ color: '#666' }}>
              –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å –∑–∞ —Å–≤–µ–∂–µ—Å—Ç—å –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏.
            </small>
          </div>
        </div>
      </section>

      <section style={{ marginBottom: 24 }}>
        <h3>‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</h3>
        <div style={{ background: 'white', padding: 16, borderRadius: 8, border: '1px solid #dee2e6' }}>
          
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: 16 }}>
            <div>
              <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
                –ú–∏–Ω. —Å–∫–æ—Ä
              </label>
              <input
                type="number"
                step="0.05"
                min="0"
                max="1"
                value={vals['min_score'] || '0.15'}
                onChange={(e) => update('min_score', e.target.value)}
                style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
              />
            </div>

            <div>
              <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
                üöÄ –ê–∫—Ç–∏–≤–∞—Ü–∏—è ($)
              </label>
              <input
                type="number"
                step="50"
                min="50"
                max="1000"
                value={vals['activation_min_liquidity_usd'] || '200'}
                onChange={(e) => update('activation_min_liquidity_usd', e.target.value)}
                style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
              />
            </div>

            <div>
              <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
                üíß –ú–∏–Ω. –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å ($)
              </label>
              <input
                type="number"
                step="100"
                min="100"
                max="2000"
                value={vals['min_pool_liquidity_usd'] || '500'}
                onChange={(e) => update('min_pool_liquidity_usd', e.target.value)}
                style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
              />
            </div>

            <div>
              <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
                Hot –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫)
              </label>
              <input
                type="number"
                step="5"
                min="5"
                max="60"
                value={vals['hot_interval_sec'] || '10'}
                onChange={(e) => update('hot_interval_sec', e.target.value)}
                style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
              />
            </div>

            <div>
              <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
                Cold –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫)
              </label>
              <input
                type="number"
                step="5"
                min="30"
                max="300"
                value={vals['cold_interval_sec'] || '45'}
                onChange={(e) => update('cold_interval_sec', e.target.value)}
                style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
              />
            </div>

            <div>
              <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
                NotArb —Å–∫–æ—Ä
              </label>
              <input
                type="number"
                step="0.1"
                min="0.1"
                max="1"
                value={vals['notarb_min_score'] || '0.5'}
                onChange={(e) => update('notarb_min_score', e.target.value)}
                style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
              />
            </div>

            <div>
              <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
                NotArb –º–∞–∫—Å. —Å–ø–∞–º %
              </label>
              <input
                type="number"
                step="1"
                min="0"
                max="100"
                value={vals['notarb_max_spam_percentage'] || '50'}
                onChange={(e) => update('notarb_max_spam_percentage', e.target.value)}
                style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
              />
              <small style={{ color: '#666' }}>
                –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–ø–∞–º–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ NotArb (0-100)
              </small>
            </div>
          </div>
          
          <div style={{ marginTop: 16 }}>
            <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
              ü§ñ Whitelist –∫–æ—à–µ–ª—å–∫–æ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–ø–∞–º-–∞–Ω–∞–ª–∏–∑–µ)
            </label>
            <textarea
              value={vals['spam_whitelist_wallets'] || '8vNwSvT1S8P99c9XmjfXfV4DSGZLfUoNFx63zngCuh54'}
              onChange={(e) => update('spam_whitelist_wallets', e.target.value)}
              style={{ 
                width: '100%', 
                padding: 8, 
                border: '1px solid #ccc', 
                borderRadius: 4,
                fontFamily: 'monospace',
                fontSize: '12px',
                minHeight: '60px'
              }}
              placeholder="–ê–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
            />
            <small style={{ color: '#666' }}>
              –ö–æ—à–µ–ª—å–∫–∏ –±–æ—Ç–æ–≤ –∏ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é). –ò—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å–ø–∞–º–∞.
            </small>
          </div>
        </div>
      </section>

      <section style={{ marginBottom: 24 }}>
        <h3>üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ backlog</h3>
        <div style={{ background: 'white', padding: 16, borderRadius: 8, border: '1px solid #dee2e6' }}>
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: 16 }}>
            <div>
              <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
                ‚ö†Ô∏è –ü–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
              </label>
              <input
                type="number"
                step="5"
                min="10"
                max="500"
                value={vals['backlog_warning_threshold'] || '75'}
                onChange={(e) => update('backlog_warning_threshold', e.target.value)}
                style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
              />
              <small style={{ color: '#666' }}>
                –†–∞–∑–º–µ—Ä backlog –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
              </small>
            </div>

            <div>
              <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
                üö® –ü–æ—Ä–æ–≥ –æ—à–∏–±–∫–∏
              </label>
              <input
                type="number"
                step="5"
                min="20"
                max="500"
                value={vals['backlog_error_threshold'] || '100'}
                onChange={(e) => update('backlog_error_threshold', e.target.value)}
                style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
              />
              <small style={{ color: '#666' }}>
                –†–∞–∑–º–µ—Ä backlog –¥–ª—è –∞–ª–µ—Ä—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
              </small>
            </div>

            <div>
              <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
                üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥
              </label>
              <input
                type="number"
                step="10"
                min="50"
                max="500"
                value={vals['backlog_critical_threshold'] || '150'}
                onChange={(e) => update('backlog_critical_threshold', e.target.value)}
                style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
              />
              <small style={{ color: '#666' }}>
                –†–∞–∑–º–µ—Ä backlog –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
              </small>
            </div>
          </div>
        </div>
      </section>

      <section style={{ marginBottom: 24 }}>
        <h3>üì¶ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏</h3>
        <div style={{ background: 'white', padding: 16, borderRadius: 8, border: '1px solid #dee2e6' }}>
          
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: 16 }}>
            <div>
              <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
                üì¶ –ê—Ä—Ö–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö (—á–∞—Å—ã)
              </label>
              <input
                type="number"
                step="1"
                min="1"
                max="72"
                value={vals['archive_below_hours'] || '12'}
                onChange={(e) => update('archive_below_hours', e.target.value)}
                style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
              />
              <small style={{ color: '#666' }}>
                –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —Å –Ω–∏–∑–∫–∏–º —Å–∫–æ—Ä–æ–º.
              </small>
            </div>

            <div>
              <label style={{ display: 'block', marginBottom: 4, fontWeight: 500 }}>
                ‚è∞ –¢–∞–π–º–∞—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—á–∞—Å—ã)
              </label>
              <input
                type="number"
                step="1"
                min="1"
                max="72"
                value={vals['monitoring_timeout_hours'] || '12'}
                onChange={(e) => update('monitoring_timeout_hours', e.target.value)}
                style={{ width: '100%', padding: 8, border: '1px solid #ccc', borderRadius: 4 }}
              />
              <small style={{ color: '#666' }}>
                –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ.
              </small>
            </div>
          </div>
        </div>
      </section>

      <div style={{ display: 'flex', gap: 12, marginTop: 24 }}>
        <button
          onClick={() => save(false)}
          disabled={saving}
          style={{
            padding: '12px 24px',
            background: '#28a745',
            color: 'white',
            border: 'none',
            borderRadius: 4,
            cursor: saving ? 'not-allowed' : 'pointer',
            opacity: saving ? 0.6 : 1
          }}
        >
          {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
        </button>
        
        <button
          onClick={() => save(true)}
          disabled={saving}
          style={{
            padding: '12px 24px',
            background: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: 4,
            cursor: saving ? 'not-allowed' : 'pointer',
            opacity: saving ? 0.6 : 1
          }}
        >
          {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å'}
        </button>
      </div>
    </div>
  )
}