#!/usr/bin/env python3
"""
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–±–æ–µ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
"""

from __future__ import annotations
import sys
import logging
from datetime import datetime, timezone

from src.core.json_logging import configure_logging
from src.adapters.db.base import SessionLocal
from src.adapters.repositories.tokens_repo import TokensRepository
from src.domain.settings.service import SettingsService
from src.adapters.services.dexscreener_client import DexScreenerClient
from src.domain.metrics.dex_aggregator import aggregate_wsol_metrics
from src.domain.scoring.scorer import compute_score, compute_smoothed_score
from src.domain.pools.pool_type_service import PoolTypeService


def main():
    configure_logging(level="INFO")
    log = logging.getLogger("force_update")
    
    print("üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–°–ï–• –¢–û–ö–ï–ù–û–í")
    print("=" * 50)
    print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–±–æ–µ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    print()
    
    with SessionLocal() as sess:
        repo = TokensRepository(sess)
        settings = SettingsService(sess)
        pool_service = PoolTypeService(sess)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        smoothing_alpha = float(settings.get("score_smoothing_alpha") or 0.3)
        min_pool_liquidity = float(settings.get("min_pool_liquidity_usd") or 500)
        max_price_change = 0.5  # Fixed value for legacy compatibility
        
        weights = {
            "weight_s": float(settings.get("weight_s") or 0.35),
            "weight_l": float(settings.get("weight_l") or 0.25),
            "weight_m": float(settings.get("weight_m") or 0.20),
            "weight_t": float(settings.get("weight_t") or 0.20),
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        tokens = repo.list_by_status("active", limit=1000)
        
        if not tokens:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tokens)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
        print("üåê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ DexScreener...")
        
        client = DexScreenerClient(timeout=10.0)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
        updated = 0
        errors = 0
        
        for i, token in enumerate(tokens, 1):
            symbol = (token.symbol or "UNK")[:6]
            print(f"{i:3}/{len(tokens)} {symbol:6} ", end="", flush=True)
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç DexScreener
                pairs = client.get_pairs(token.mint_address)
                if pairs is None:
                    print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    errors += 1
                    continue
                
                enriched_pairs = pool_service.enrich_pairs(pairs)
                if not enriched_pairs:
                    print("‚ùå –Ω–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–ª–æ–≤")
                    errors += 1
                    continue

                # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
                metrics = aggregate_wsol_metrics(
                    token.mint_address,
                    enriched_pairs,
                    min_liquidity_usd=min_pool_liquidity,
                    max_price_change=max_price_change
                )
                pool_service.insert_primary_pool_type(metrics)
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä—ã
                score, _ = compute_score(metrics, weights)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–π —Å–∫–æ—Ä
                previous_smoothed_score = repo.get_previous_smoothed_score(token.id)
                smoothed_score = compute_smoothed_score(score, previous_smoothed_score, smoothing_alpha)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∞–ø—à–æ—Ç (–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                snap_id = repo.insert_score_snapshot(
                    token_id=token.id,
                    metrics=metrics,
                    score=score,
                    smoothed_score=smoothed_score
                )
                
                print(f"‚úÖ –°–∫–æ—Ä: {smoothed_score:.3f}")
                updated += 1
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:30]}")
                errors += 1
                log.error("token_update_failed", extra={"extra": {"mint": token.mint_address, "error": str(e)}})
        
        pool_service.close()

        print()
        print(f"üìà –ò–¢–û–ì–ò –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
        print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated} —Ç–æ–∫–µ–Ω–æ–≤")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {errors}")
        print(f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {updated/(updated+errors)*100:.1f}%" if (updated+errors) > 0 else "   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: 0%")
        
        if updated > 0:
            print(f"\nüéâ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ!")
            print(f"   –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
            print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å DexScreener API")


if __name__ == "__main__":
    main()
