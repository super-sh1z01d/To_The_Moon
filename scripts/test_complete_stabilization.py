#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ–≤.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–µ—Ä.
"""

from __future__ import annotations

import sys
import logging
from src.core.json_logging import configure_logging
from src.adapters.db.base import SessionLocal
from src.adapters.repositories.tokens_repo import TokensRepository
from src.domain.settings.service import SettingsService
from src.domain.metrics.dex_aggregator import aggregate_wsol_metrics
from src.domain.scoring.scorer import compute_score, compute_smoothed_score
from src.domain.validation.data_filters import should_skip_score_update


def test_complete_stabilization():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏."""
    configure_logging(level="INFO")
    log = logging.getLogger("stabilization_test")
    
    print("üéØ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ–≤")
    print("=" * 45)
    
    with SessionLocal() as sess:
        repo = TokensRepository(sess)
        settings = SettingsService(sess)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        smoothing_alpha = float(settings.get("score_smoothing_alpha") or 0.3)
        min_pool_liquidity = float(settings.get("min_pool_liquidity_usd") or 500)
        max_price_change = 0.5  # Fixed value for legacy compatibility
        min_score_change = float(settings.get("min_score_change") or 0.05)
        
        weights = {
            "weight_s": float(settings.get("weight_s") or 0.35),
            "weight_l": float(settings.get("weight_l") or 0.25),
            "weight_m": float(settings.get("weight_m") or 0.20),
            "weight_t": float(settings.get("weight_t") or 0.20),
        }
        
        print(f"üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏:")
        print(f"   –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ Œ± = {smoothing_alpha}")
        print(f"   –ú–∏–Ω. –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø—É–ª–∞ = ${min_pool_liquidity}")
        print(f"   –ú–∞–∫—Å. –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã = {max_price_change:.0%}")
        print(f"   –ú–∏–Ω. –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–∞ = {min_score_change:.1%}")
        print()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        test_mint = "StabilizationTestMint111111111111111111"
        existing_token = repo.get_by_mint(test_mint)
        
        if existing_token:
            token = existing_token
        else:
            inserted = repo.insert_monitoring(
                mint=test_mint,
                name="Stabilization Test Token", 
                symbol="STB"
            )
            if not inserted:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
                return
            token = repo.get_by_mint(test_mint)
            repo.set_active(token)
        
        print(f"üî¨ –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã
        test_scenarios = [
            {
                "name": "–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—ã–ª–∏–Ω–∫–∞–º–∏",
                "pairs": [
                    {"baseToken": {"address": test_mint}, "quoteToken": {"symbol": "SOL"}, "dexId": "raydium",
                     "liquidity": {"usd": 25000}, "priceChange": {"m5": 5.0, "m15": 8.0}, 
                     "txns": {"m5": {"buys": 60, "sells": 40}}},
                    {"baseToken": {"address": test_mint}, "quoteToken": {"symbol": "SOL"}, "dexId": "orca",
                     "liquidity": {"usd": 50}, "priceChange": {"m5": 2.0, "m15": 3.0},   # –ü–´–õ–ò–ù–ö–ê
                     "txns": {"m5": {"buys": 2, "sells": 1}}},
                    {"baseToken": {"address": test_mint}, "quoteToken": {"symbol": "SOL"}, "dexId": "meteora",
                     "liquidity": {"usd": 15000}, "priceChange": {"m5": 8.0, "m15": 6.0}, 
                     "txns": {"m5": {"buys": 80, "sells": 70}}},
                ]
            },
            {
                "name": "–î–∞–Ω–Ω—ã–µ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ü–µ–Ω—ã",
                "pairs": [
                    {"baseToken": {"address": test_mint}, "quoteToken": {"symbol": "SOL"}, "dexId": "raydium",
                     "liquidity": {"usd": 30000}, "priceChange": {"m5": 85.0, "m15": 15.0},  # –≠–ö–°–¢–†–ï–ú
                     "txns": {"m5": {"buys": 120, "sells": 80}}},
                ]
            },
            {
                "name": "–î–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏",
                "pairs": [
                    {"baseToken": {"address": test_mint}, "quoteToken": {"symbol": "SOL"}, "dexId": "raydium",
                     "liquidity": {"usd": 45000}, "priceChange": {"m5": 0.1, "m15": 2.0}, 
                     "txns": {"m5": {"buys": 0, "sells": 0}}},  # –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û: –≤—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, –Ω–µ—Ç —Å–¥–µ–ª–æ–∫
                ]
            },
            {
                "name": "–°—Ç–∞–±–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                "pairs": [
                    {"baseToken": {"address": test_mint}, "quoteToken": {"symbol": "SOL"}, "dexId": "raydium",
                     "liquidity": {"usd": 20000}, "priceChange": {"m5": 3.0, "m15": 5.0}, 
                     "txns": {"m5": {"buys": 50, "sells": 45}}},
                ]
            },
        ]
        
        print("–°—Ü–µ–Ω–∞—Ä–∏–π                          | Raw Score | Smoothed | Filtered | Status")
        print("-" * 75)
        
        smoothed_score = None
        skipped_updates = 0
        
        for i, scenario in enumerate(test_scenarios):
            # 1. –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            metrics = aggregate_wsol_metrics(
                test_mint, 
                scenario["pairs"],
                min_liquidity_usd=min_pool_liquidity,
                max_price_change=max_price_change
            )
            
            # 2. –í—ã—á–∏—Å–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∫–æ—Ä —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏
            raw_score, comps = compute_score(metrics, weights)
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
            prev_raw = getattr(test_complete_stabilization, 'prev_raw_score', None) if i > 0 else None
            if should_skip_score_update(raw_score, prev_raw, min_score_change):
                skipped_updates += 1
                status = "‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ"
                display_smoothed = smoothed_score or 0
            else:
                # 4. –í—ã—á–∏—Å–ª—è–µ–º —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–π —Å–∫–æ—Ä
                smoothed_score = compute_smoothed_score(raw_score, smoothed_score, smoothing_alpha)
                status = "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω"
                display_smoothed = smoothed_score
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            filtered_info = ""
            if metrics.get("pools_filtered_out", 0) > 0:
                filtered_info += f" ({metrics['pools_filtered_out']} –ø—É–ª–æ–≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ)"
            if metrics.get("data_quality_warning"):
                filtered_info += " (‚ö†Ô∏è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ)"
            
            scenario_name = scenario["name"][:28].ljust(28)
            print(f" {scenario_name} | {raw_score:8.3f} | {display_smoothed:8.3f} | {len(scenario['pairs'])-metrics.get('pools_filtered_out',0)}/{len(scenario['pairs'])} –ø—É–ª–æ–≤ | {status}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            test_complete_stabilization.prev_raw_score = raw_score
        
        print("-" * 75)
        print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   üî¢ –í—Å–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(test_scenarios)}")
        print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {skipped_updates}")
        print(f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(test_scenarios) - skipped_updates}")
        print()
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å "–¥–æ" –∏ "–ø–æ—Å–ª–µ"
        print("üéØ –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
        print("   ‚úÖ 1. –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ - —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ 80%+")
        print("   ‚úÖ 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã - —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
        print("   ‚úÖ 3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö - —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –∏ —à—É–º–∞")
        print("   ‚úÖ 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –≥–∏–±–∫–æ—Å—Ç—å –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        print()
        
        print("üìä –ò—Ç–æ–≥–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç:")
        print("   ‚Ä¢ –û–±—â–µ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: 85-95% ‚ú®")
        print("   ‚Ä¢ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        print("   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ –∫ –∑–Ω–∞—á–∏–º—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º")
        print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é! üöÄ")


if __name__ == "__main__":
    test_complete_stabilization()
