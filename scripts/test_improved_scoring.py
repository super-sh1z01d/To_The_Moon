#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª —Å–∫–æ—Ä–∏–Ω–≥–∞.
"""

from __future__ import annotations

import sys
import logging
from src.core.json_logging import configure_logging
from src.adapters.db.base import SessionLocal
from src.adapters.repositories.tokens_repo import TokensRepository
from src.domain.settings.service import SettingsService
from src.domain.scoring.scorer import compute_score, compute_smoothed_score


def test_improved_scoring():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã —Å–∫–æ—Ä–∏–Ω–≥–∞."""
    configure_logging(level="INFO")
    log = logging.getLogger("improved_scoring_test")
    
    with SessionLocal() as sess:
        repo = TokensRepository(sess)
        settings = SettingsService(sess)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        alpha = float(settings.get("score_smoothing_alpha") or 0.3)
        weights = {
            "weight_s": float(settings.get("weight_s") or 0.35),
            "weight_l": float(settings.get("weight_l") or 0.25),
            "weight_m": float(settings.get("weight_m") or 0.20),
            "weight_t": float(settings.get("weight_t") or 0.20),
        }
        
        print(f"üßÆ –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª —Å–∫–æ—Ä–∏–Ω–≥–∞")
        print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: Œ± = {alpha}, –≤–µ—Å–∞ = {weights}")
        print()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ä–º—É–ª
        test_scenarios = [
            {
                "name": "üî• –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å",
                "metrics": {"L_tot": 50000, "delta_p_5m": 0.12, "delta_p_15m": 0.08, "n_5m": 200}
            },
            {
                "name": "‚ö° –ü—Ä–æ–±–ª–µ–º–Ω—ã–π momentum (–º–∞–ª—ã–π dp15)",
                "metrics": {"L_tot": 25000, "delta_p_5m": 0.06, "delta_p_15m": 0.002, "n_5m": 120}
            },
            {
                "name": "üßä –ù—É–ª–µ–≤–æ–π dp15",
                "metrics": {"L_tot": 15000, "delta_p_5m": 0.04, "delta_p_15m": 0.0, "n_5m": 80}
            },
            {
                "name": "üìà –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç",
                "metrics": {"L_tot": 35000, "delta_p_5m": 0.03, "delta_p_15m": 0.05, "n_5m": 100}
            },
            {
                "name": "üåä –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                "metrics": {"L_tot": 8000, "delta_p_5m": 0.01, "delta_p_15m": 0.02, "n_5m": 30}
            }
        ]
        
        print("–°—Ü–µ–Ω–∞—Ä–∏–π                      | Score | –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (l, s, m, t)")
        print("-" * 65)
        
        for scenario in test_scenarios:
            score, comps = compute_score(scenario["metrics"], weights)
            
            print(f"{scenario['name']:28s} | {score:.3f} | l={comps['l']:.2f} s={comps['s']:.2f} m={comps['m']:.2f} t={comps['t']:.2f}")
            
        print()
        print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        print("–ò—Ç–µ—Ä–∞—Ü–∏—è | –ò—Å—Ö–æ–¥–Ω—ã–π | –°–≥–ª–∞–∂–µ–Ω–Ω—ã–π | –ò–∑–º–µ–Ω–µ–Ω–∏–µ")
        print("-" * 45)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–µ—Ä–∏—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        volatile_metrics = [
            {"L_tot": 20000, "delta_p_5m": 0.08, "delta_p_15m": 0.06, "n_5m": 150},
            {"L_tot": 45000, "delta_p_5m": 0.02, "delta_p_15m": 0.001, "n_5m": 80},   # –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Å–ª—É—á–∞–π
            {"L_tot": 18000, "delta_p_5m": 0.11, "delta_p_15m": 0.0, "n_5m": 200},   # –ù—É–ª–µ–≤–æ–π dp15
            {"L_tot": 30000, "delta_p_5m": 0.01, "delta_p_15m": 0.08, "n_5m": 60},
        ]
        
        smoothed_score = None
        
        for i, metrics in enumerate(volatile_metrics):
            raw_score, _ = compute_score(metrics, weights)
            smoothed_score = compute_smoothed_score(raw_score, smoothed_score, alpha)
            
            change = f"{smoothed_score - (smoothed_score if i == 0 else prev_smooth):+.3f}" if i > 0 else "‚Äî"
            print(f"   {i+1:2d}    |  {raw_score:.3f}   |   {smoothed_score:.3f}    | {change}")
            
            prev_smooth = smoothed_score
        
        print()
        print("üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print("‚úÖ –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –º–∞–ª—ã–µ —á–∏—Å–ª–∞ –≤ momentum")
        print("‚úÖ –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∫–æ—Ä—ã")
        print("‚úÖ –ù–µ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")


if __name__ == "__main__":
    test_improved_scoring()
